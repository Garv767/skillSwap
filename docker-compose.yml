version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: skillswap-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: skillswap123
      MONGO_INITDB_DATABASE: skillswap
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - skillswap-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/skillswap --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: skillswap-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:skillswap123@mongodb:27017/skillswap?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 7d
      CLIENT_URL: http://localhost:3000
      PORT: 5000
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - skillswap-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: skillswap-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - skillswap-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: skillswap-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass skillswap123
    volumes:
      - redis_data:/data
    networks:
      - skillswap-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  skillswap-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local